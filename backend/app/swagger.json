{
  "swagger": "2.0",
  "info": {
    "description": "This is an API for an Event Service Platform.",
    "version": "1.0.0",
    "title": "Event Service Platform",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "frank_julian@hotmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3000",
  "basePath": "",
  "tags": [
    {
      "name": "User",
      "description": "Everything about registration, login, updating user data etc."

    },
    {
      "name": "Services",
      "description": "API's for adding new services"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/user/register": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Register a new user",
        "description": "",
        "operationId": "addPet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be sent",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created"
          },
          "400": {
            "description": "bad request"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Checks user login data and sends them a JSON web token",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be sent",
            "required": true,
            "schema": {
              "$ref": "#/definitions/login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "items": {
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/user/verifyToken": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Checks if the user has a valid token",
        "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "unauthorized request"
          }
        }
      }
    },
    "/user/setNewPassword": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Set a new password",
        "description": "",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be sent",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "items": {
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/user/forgotPassword": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset password",
        "description": "Rests the password of a user, generates a new one and sends an email",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name":"searchText",
            "in": "body",
            "description":"E-Mail to identify user and send a new password",
            "required":true,
            "schema": {
              "$ref": "#/definitions/forgotPassword"
            },
          }

        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Show all registered users (also non-validated ones)",
        "description": "",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "unauthorized request"
          }
        }
      }
    },
    "/user/verify": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Show all non-validated users",
        "description": "",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "unauthorized request"
          }
        }
      }
    },
    "/user/verify/{id}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Show all non-validated users",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to be verified",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "unauthorized request"
          }
        }
      }
    },
    "/user/{email}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get data about a specific user",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "The email of the users needs to be sent",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "unauthorized request"
          }
        }
      }
    },
    "/user/{id}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a user",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the users needs to be sent",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "unauthorized request"
          }
        }
      }
    }
  }
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "newPassword": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "password": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Order"
      }
    },

    "forgotPassword": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Order"
      }
    },
       "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "vorname": {
          "type": "string"
        },
        "nachname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userGroup": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },

    "login": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
         },
        "password": {
          "type": "string"
        }
        }},

      },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
